stages:
  - build-base
  - clang-format
  - build-lofarbeam
  - build-doc
  - deploy-doc
  - build-dependency
  - test-dependency
  - deploy

build-base:
  stage: build-base
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker build
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --tag $CI_REGISTRY_IMAGE:base
      -f ./test/Dockerfile-base .
    - docker push $CI_REGISTRY_IMAGE:base

clang-format:
  stage: clang-format
  image: $CI_REGISTRY_IMAGE:base
  script: 
    - apt-get update && apt-get -y install clang-format
    - ./scripts/clang-format-check.sh

build-lofarbeam:
  stage: build-lofarbeam
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker build
      --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      -f ./test/Dockerfile-lofarbeam .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

build-doc:
  stage: build-doc
  script:
  - >
    docker run
    --name $CI_COMMIT_SHORT_SHA
    --workdir /opt/lofarbeam/build/
    $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    sh -c 'make doc'
  - docker cp $CI_COMMIT_SHORT_SHA:/opt/lofarbeam/build/doc/html htmldoc
  - docker rm $CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
    - htmldoc

deploy-doc:
  stage: deploy-doc
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H dop288 > ~/.ssh/known_hosts
  script:
    - scp -r htmldoc/* citt@dop288:EveryBeam
  only:
    refs:
      - master

build-dp3:
  stage: build-dependency
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker build
      --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --tag $CI_REGISTRY_IMAGE:dp3-$CI_COMMIT_SHORT_SHA
      -f ./test/Dockerfile-dp3 .
    - docker push $CI_REGISTRY_IMAGE:dp3-$CI_COMMIT_SHORT_SHA

build-wsclean:
  stage: build-dependency
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker build
      --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --tag $CI_REGISTRY_IMAGE:wsclean-$CI_COMMIT_SHORT_SHA
      -f ./test/Dockerfile-wsclean .
    - docker push $CI_REGISTRY_IMAGE:wsclean-$CI_COMMIT_SHORT_SHA

test-dp3:
  variables:
    GIT_STRATEGY: none
  stage: test-dependency
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker run
      $CI_REGISTRY_IMAGE:dp3-$CI_COMMIT_SHORT_SHA
      /opt/lofarbeam/lofarbeam/test/tDockerDP3

test-wsclean:
  variables:
    GIT_STRATEGY: none
  stage: test-dependency
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker pull
      $CI_REGISTRY_IMAGE:wsclean-$CI_COMMIT_SHORT_SHA

deploy:
  variables:
    GIT_STRATEGY: none
  only:
    - master
  stage: deploy
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
