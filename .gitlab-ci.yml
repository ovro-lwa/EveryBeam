# Copyright (C) 2020 ASTRON (Netherlands Institute for Radio Astronomy)
# SPDX-License-Identifier: GPL-3.0-or-later

workflow:
  rules:
    - if: '$CI_MERGE_REQUEST_TITLE =~ /(?i)(^WIP.*)/ || $CI_MERGE_REQUEST_TITLE =~ /(?i)(^DRAFT.*)/'
      when: never
    - when: always

stages:
  - prepare
  - build
  - package
  - oskar-comparison
  - deploy

build-base:
  stage: prepare
  script:
    - docker build --tag everybeam_base:${CI_COMMIT_SHORT_SHA} -f ./docker/Dockerfile-base .
  rules:
    - when: always

clang-format:
  stage: build
  needs: ["build-base"]
  image: everybeam_base:${CI_COMMIT_SHORT_SHA}
  before_script:
    - apt-get -y install python3-pip
    - python3 -m pip install clang-format==9.0.0
  script:
    - ./scripts/run-clang-format.sh
  rules:
    # Do not add for schedules
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: on_success

# Build a debug version of EveryBeam from the base image
test-and-coverage:
  stage: build
  needs: ["build-base"]
  image: everybeam_base:${CI_COMMIT_SHORT_SHA}
  before_script:
    - apt-get update
    - apt-get -y install python3-pip
    - python3 -m pip install gcovr
    - python3 -m pip install pytest
    - python3 -m pip install pytest-lazy-fixture
  script:
    - WORKDIR=$PWD
    # Download casacore wsrt measures
    - wget -q ftp://ftp.astron.nl/outgoing/Measures/WSRT_Measures.ztar && tar -xf WSRT_Measures.ztar -C /var/lib/casacore/data/ && rm -f WSRT_Measures.ztar
    # Build in Debug mode
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=.. -DCMAKE_BUILD_TYPE=Debug -DBUILD_WITH_PYTHON=ON -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage" ..
    - make install -j8
    - ctest -j4 -T test
    # Capture coverage
    - gcovr -r .. -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/test/.*' -e '.*/demo/.*'
    - gcovr -r .. -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/test/.*' -e '.*/demo/.*' --xml > coverage.xml
    # Check whether pyeverybeam modules can be found from home directory after setting the PYTHONPATH
    - PYVERSION=`python3 --version | grep -P -o ".*\s\K\d\.\d(?=\.\d)"`
    - export PYTHONPATH=${WORKDIR}/lib/python${PYVERSION}/dist-packages
    - cd && python3 -c "import everybeam"
  rules:
    - when: on_success
  artifacts:
    reports:
      # NOTE: artifacts only work with relative paths...
      cobertura: build/coverage.xml
      junit: build/cpp/test/unittests.xml

build-everybeam:
  stage: build
  needs: ["build-base"]
  script:
    - docker build --build-arg BASE_TAG=${CI_COMMIT_SHORT_SHA} --tag everybeam:${CI_COMMIT_SHORT_SHA} -f ./docker/Dockerfile-everybeam .
  rules:
    - when: on_success

build-doc:
  stage: build
  needs: ["build-base"]
  image: everybeam_base:${CI_COMMIT_SHORT_SHA}
  script:
    - EVERYBEAM_PATH=$PWD
    - mkdir build && cd build
    - cmake $EVERYBEAM_PATH
    - make doc
  artifacts: # Only for master the docs are published; for branches it may be useful to browse the artifacts
    paths:
    - build/doc/html
  rules:
    # Only add job for commits to master or on merge_request_event
    # NOTE: creates duplicate pipelines in case of open MR,
    # see https://gitlab.com/gitlab-org/gitlab/-/issues/201845
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

build-package:
  stage: package
  needs: ["build-everybeam"]
  image: everybeam:${CI_COMMIT_SHORT_SHA}
  script:
    - mkdir everybeam_package
    - export SRC=$(pwd)
    - cd /opt/everybeam/build
    - make package
    - mv $(ls -p | grep *\.deb) $SRC/everybeam_package
  artifacts:
    paths:
    - everybeam_package/
  rules:
    # The package is built only during a merge_request_event, a merge to master,
    # or when the pipeline is triggered by a tag event.
    # A - yet to be created - deploy-package job should only be run during merges
    # to master (to create a :latest version) and during a tag event (to create a :stable)
    # version
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"'
    - if: '$CI_COMMIT_TAG'

build-compare-oskar:
  stage: oskar-comparison
  image: everybeam:${CI_COMMIT_SHORT_SHA}
  needs: ["build-everybeam"]
  before_script:
    - apt-get -y install python3-pip
    - python3 -m pip install pip setuptools --upgrade
    # Install python requirements for the OSKAR "integration" test
    - python3 -m pip install numpy==1.19.0 scipy h5py astropy tqdm matplotlib pandas lofarantpos
    - mkdir -p /opt/oskar/build
    - cd /opt/oskar && git clone https://github.com/OxfordSKA/OSKAR.git
    # Check-out at specific version, before HDF5 got broken
    - cd OSKAR && git checkout bb3f9112e20e1d5e9b91b695828f993ad6bc91ee
    - cd /opt/oskar/build
  script:
    # OSKAR cpp install
    - cmake -DCMAKE_INSTALL_PREFIX=.. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS="-coverage" ../OSKAR/
    - make -j8
    - make install
    # Python install
    - export OSKAR_INC_DIR=/opt/oskar/include && export OSKAR_LIB_DIR=/opt/oskar/lib
    - cd ./../OSKAR/python && python3 setup.py install
    - export PATH=/opt/oskar/bin:$PATH
    # Run OSKAR comparison, set some env variables for this session
    - export NPIXELS=8 && export APPLY_TRANSPOSE=OFF && MAX_ORDER=3 && TOLERANCE=1e-12
    - cd /opt/everybeam/build
    - make VERBOSE=1 comparison-oskar-basefunctions
    # Run OSKAR stationresponse comparison
    - export NPIXELS=32 TOLERANCE=1e-5
    - make VERBOSE=1 comparison-oskar-station-response
  rules:
    # Only add job for schedules, on merge_request_event, and on master
    # NOTE: creates duplicate pipelines in case of open MR,
    # see https://gitlab.com/gitlab-org/gitlab/-/issues/201845
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master"'

deploy-doc:
  stage: deploy
  needs: ["build-doc"]
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H dop288 > ~/.ssh/known_hosts
  script:
    - scp -r build/doc/html/* citt@dop288:EveryBeam
  rules:
    # Only add job when ran on master and not a scheduled job, i.e. when merging
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"'
    - when: never

deploy-image:
  variables:
    GIT_STRATEGY: none
  needs: ["build-everybeam"]
  stage: deploy
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag everybeam:${CI_COMMIT_SHORT_SHA} $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  rules:
    # Only add job when ran on master and not a scheduled job, i.e. when merging
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"'
    - when: never

check-stack:
  variables:
    # Pass commit hash to downstream pipeline
    EVERYBEAM_TRIGGER_HASH: $CI_COMMIT_SHA
  stage: deploy
  needs: []
  trigger:
    project: RD/schaap-stack
    branch: master
    # This will mirror the status of the downstream pipeline
    strategy: depend
  rules:
    # Only add job during merge request event
    # NOTE: creates duplicate pipelines in case of open MR,
    # see https://gitlab.com/gitlab-org/gitlab/-/issues/201845
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - when: never
