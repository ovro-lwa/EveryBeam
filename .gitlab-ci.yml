stages:
  - build-base
  - format-and-test
  - build-everybeam
  - oskar-comparison
  - build-doc
  - deploy-doc
  # - build-dependency
  # - test-dependency
  - deploy

build-base:
  stage: build-base
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker build
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --tag $CI_REGISTRY_IMAGE:base
      -f ./docker/Dockerfile-base .
    - docker push $CI_REGISTRY_IMAGE:base

clang-format:
  except:
    - schedules
  stage: format-and-test
  image: $CI_REGISTRY_IMAGE:base
  before_script:
    - apt-get -y install python3-pip
    - pip3 install clang-format
  script: 
    - ./scripts/clang-format-check.sh

# Build a debug version of EveryBeam from the base image
test-and-coverage:
  stage: format-and-test
  image: $CI_REGISTRY_IMAGE:base
  except:
    - schedules
  dependencies: 
    - build-base
  before_script:
    - apt-get -y install python3-pip
    - pip3 install gcovr
  script:
    - mkdir -p /opt/everybeam/build
    - cd /opt/everybeam && git clone https://git.astron.nl/RD/EveryBeam.git EveryBeam
    - cd /opt/everybeam/EveryBeam && git checkout ${CI_COMMIT_SHORT_SHA}
    - cd /opt/everybeam/build
    - cmake -DCMAKE_INSTALL_PREFIX=.. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage" ../EveryBeam/
    - make install -j8
    - ctest -T test
    - gcovr -r .. -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/test/.*' -e '.*/demo/.*'

build-everybeam:
  stage: build-everybeam
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker build
      --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      -f ./docker/Dockerfile-everybeam .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

build-oskar:
  stage: oskar-comparison
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  only:
    - schedules
  dependencies:
    - build-everybeam
  before_script:
    - apt-get -y install python3-pip
    - pip3 install numpy
    - mkdir -p /opt/oskar/build
    - cd /opt/oskar && git clone https://github.com/OxfordSKA/OSKAR.git
    - cd /opt/oskar/build
  script:
    # CPP install
    - cmake -DCMAKE_INSTALL_PREFIX=.. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS="-coverage" ../OSKAR/
    - make -j8
    - make install
    # Python install
    - export OSKAR_INC_DIR=/opt/oskar/include && export OSKAR_LIB_DIR=/opt/oskar/lib
    - cd ./../OSKAR/python && python3 setup.py install && cd $HOME
    - python3 -c "import oskar"

build-doc:
  stage: build-doc
  except:
    - schedules
  script:
  - >
    docker run
    --name $CI_COMMIT_SHORT_SHA
    --workdir /opt/everybeam/build/
    $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    sh -c 'make doc'
  - docker cp $CI_COMMIT_SHORT_SHA:/opt/everybeam/build/doc/html htmldoc
  - docker rm $CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
    - htmldoc

deploy-doc:
  stage: deploy-doc
  except:
    - schedules
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H dop288 > ~/.ssh/known_hosts
  script:
    - scp -r htmldoc/* citt@dop288:EveryBeam
  only:
    refs:
      - master

# build-dp3:
#   stage: build-dependency
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - >
#       docker build
#       --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
#       --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
#       --tag $CI_REGISTRY_IMAGE:dp3-$CI_COMMIT_SHORT_SHA
#       -f ./docker/Dockerfile-dp3 .
#     - docker push $CI_REGISTRY_IMAGE:dp3-$CI_COMMIT_SHORT_SHA

# build-wsclean:
#   stage: build-dependency
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - >
#       docker build
#       --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
#       --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
#       --tag $CI_REGISTRY_IMAGE:wsclean-$CI_COMMIT_SHORT_SHA
#       -f ./docker/Dockerfile-wsclean .
#     - docker push $CI_REGISTRY_IMAGE:wsclean-$CI_COMMIT_SHORT_SHA

# test-dp3:
#   variables:
#     GIT_STRATEGY: none
#   stage: test-dependency
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - >
#       docker run
#       $CI_REGISTRY_IMAGE:dp3-$CI_COMMIT_SHORT_SHA
#       /opt/everybeam/everybeam/docker/tDockerDP3

# test-wsclean:
#   variables:
#     GIT_STRATEGY: none
#   stage: test-dependency
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - >
#       docker pull
#       $CI_REGISTRY_IMAGE:wsclean-$CI_COMMIT_SHORT_SHA

deploy:
  variables:
    GIT_STRATEGY: none
  except:
    - schedules
  only:
    - master
  stage: deploy
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
